#!/usr/bin/env python
PACKAGE = "oculus_sonar_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Flags for configuring the instrument
# TODO: Possibly, some of these shouldn't be configurable
gen.add("range_as_meters", bool_t, 0, "Range is meters (vs. %)", True)
gen.add("data_16bit", bool_t, 0, "Use 16bit values (vs. 8bit)", False)
gen.add("send_gain", bool_t, 0, "Send Gain", False)
gen.add("send_simple_return", bool_t, 0, "Send Simple Return message", True)
gen.add("gain_assistance", bool_t, 0, "Gain assistance", True)

gen.add("range",      double_t, 0, "Range (in meters)",  2,    0, 40)
gen.add("gain",       double_t, 0, "Gain (percentage)",  50,   0, 100)
gen.add("gamma",      double_t, 0, "Gamma correction",   127,  0, 255)

pingRate_enum = gen.enum([  gen.const("Normal",   int_t,  0,  "10Hz max ping rate"),
                            gen.const("High",     int_t,  1,  "15Hz max ping rate"),
                            gen.const("Highest",  int_t,  2,  "40Hz max ping rate"),
                            gen.const("Low",      int_t,  3,  "5Hz max ping rate"),
                            gen.const("Lowest",   int_t,  4,  "2Hz max ping rate"),
                            gen.const("Standby",  int_t,  5,  "0Hz, disable ping")],
                        "An enum to set sonar ping rate")

gen.add("pingRate",  int_t, 0, "Ping rate (in Hz)",  0,    0, 5, edit_method=pingRate_enum)

freqMode_enum = gen.enum([    gen.const("Low_frequency",      int_t,  1,  "For navigation"),
                              gen.const("High_frequency",     int_t,  2,  "For target identification")],
                        "An enum to set sonar frequency mode")

gen.add("freqMode",  int_t, 0, "Sonar mode",  2,    1, 2, edit_method=freqMode_enum)

exit(gen.generate(PACKAGE, "oculus_publisher", "OculusSonar"))
